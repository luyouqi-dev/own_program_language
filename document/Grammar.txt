函数定义：
	function 函数名(参数列表) 返回值类型 {
		函数体
	}

匿名函数：
	lambda(参数列表) 返回值类型 {
		函数体
	}

对象定义：
	class 对象名 {
		public 公有成员
		private 私有成员
		protected 受保护成员
		construct() this {
			构造函数
		}
	}


变量定义：
	let 变量名: 类型;
	let 变量名: 类型 = 初始值;
	let 变量名 = 初始值;


条件语句：
	if (条件0) {
		代码块
	} else if (条件1) {
		代码块
	} else if (条件N) {
		代码块
	} else {
		代码块
	}

	switch (值) {
		case 值1: { 代码块; break; }
		case 值2: { 代码块; break; }
		case 值3: { 代码块; break; }
		default: { 代码块; break; }
	}


循环语句：
	for (初始化; 结束条件; 变化) {
		代码块
	}

	while (条件) {
		代码块
	}


函数调用：
	函数名(参数列表)


新建对象：
	new 对象名(构造函数参数列表)
	或
	new 对象名[大小]